->Some of the common problems a website may encounter could be slow loading of the resources, waiting for unnecessary files to download on initial render, a flash of unstyled content (FOUC), etc.
->To avoid such problems, we need to understand the lifecycle of how a browser renders a typical webpage.
->First, we need to understand what DOM is. When a browser sends a request to a server to fetch an HTML document, the server returns an HTML page in binary stream format which is basically a text file 
with the response header Content-Type set to the value text/html(MIME Type); charset=UTF-8.
->Using this information, the browser can convert the binary format into a readable text file.

->How does a browser render this beautiful-looking webpage from a simple HTML file which contains nothing but text? 
For that, we need to understand what is DOM, CSSOM, and Render Tree

Ref: https://medium.com/jspoint/how-the-browser-renders-a-web-page-dom-cssom-and-rendering-df10531c9969



Render-tree Construction, Layout, and Paint:

    1. The DOM and CSSOM trees are combined to form the render tree.
    2. Render tree contains only the nodes required to render the page.
    3. Layout computes the exact position and size of each object.
    4. The last step is paint, which takes in the final render tree and renders the pixels to the screen.

First, the browser combines the DOM and CSSOM into a "render tree," which captures all the visible DOM content on the page and all the CSSOM style information for each node.

To construct the render tree, the browser roughly does the following:

    1. Starting at the root of the DOM tree, traverse each visible node.
        ->Some nodes are not visible (for example, script tags, meta tags, and so on), and are omitted since they are not reflected in the rendered output.
        ->Some nodes are hidden via CSS and are also omitted from the render tree; for example, the span node---in the example above---is missing from the render tree because 
        we have an explicit rule that sets the "display: none" property on it.

    2. For each visible node, find the appropriate matching CSSOM rules and apply them.

    3. Emit visible nodes with content and their computed styles.


Here's a quick recap of the browser's steps:

   1. Process HTML markup and build the DOM tree.
   2. Process CSS markup and build the CSSOM tree.
   3. Combine the DOM and CSSOM into a render tree.
   4. Run layout on the render tree to compute geometry of each node.
   5. Paint the individual nodes to the screen.

for in detail ref: https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction


